Assignment

NOTE: Do not forget to see manual page using "--help" option in command when searching for options/commands for a particular task.

1. Install Docker, either on your native OS or on a VM. Make sure it runs. type "docker -v" to check if it's installed.
   try below commands for help
	docker --help  ---> This command shows all available options and commands to work with images and containers
	docker images --help ---> This command shows all the avaialble options and commands to work with docker images
	docker ps --help ---> This command shows all the avaialble options and commands to work with docker containers

2. Find a image from dockerhub of your choice(recommeded: nginx), don't use browser, pull the official image from dockerhub
	docker pull nginx

3. List all the available images in your machine/vm, make sure you see recently pulled image in the list.
	docker image ls
	REPOSITORY	TAG	IMAGE ID	CREATED		SIZE
	nginx		latest	f0b8a9a54136	4 days ago	133MB

4. Find out the "Full" ImageId of the image that you pulled and write it below.
	docker image ls
	ImageId=f0b8a9a54136

5. Create a container of your image 
	docker run f0b8a9a54136
or	docker run nignx

6. List all the running containers
	docker ps

7. List all the running and stopped containers
	docker ps -a

8. Find out the "Full" containerId of the container and write it below.
	docker ps -q
	ContainerId=be3cf90407d7

9. Find out how many image layers are used to build this image.
	docker history nginx
	15 images are required to build nginx image
	
10. Get the Apache Tomcat 7 server image from the docker hub.
	docker pull tomcat:7.0

11. Run the Apache Tomcat 7, I mean create a container of Apache Tomcat.
	docker run tomcat:7.0

12. Find out what is the IP Address of the Apache Tomcat Container that it is running on
	docker ps -a
	ConatimerId= 2cf376d39c2a 

13. Which Port it is using?
	http://localhost:8080

14. Try to access the Tomcat's home page from your machine/vm.
	docker run -it --rm -p 8080:8080 tomcat:7.0 

15. What is the disk size of Apache Tomcat image?
	docker system df -v
	image sizeis 4.21kb

16. Find out list of all environment variables that is configured for tomcat image, can you see JAVA_HOME and CATALINA_HOME? What did you notice about it?
	docker exec 2cf376d39c2a env

	PATH=/usr/local/tomcat/bin:/usr/local/openjdk-8/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
	HOSTNAME=2cf376d39c2a
	JAVA_HOME=/usr/local/openjdk-8
	LANG=C.UTF-8
	JAVA_VERSION=8u292
	CATALINA_HOME=/usr/local/tomcat
	TOMCAT_NATIVE_LIBDIR=/usr/local/tomcat/native-jni-lib
	LD_LIBRARY_PATH=/usr/local/tomcat/native-jni-lib
	GPG_KEYS=05AB33110949707C93A279E3D3EFE6B686867BA6 07E48665A34DCAFAE522E5E6266191C37C037D42 47309207D818FFD8DCD3F83F1931D684307A10A5 541FBE7D8F78B25E055DDEE13C370389288584E7 61B832AC2F1C5A90F0F9B00A1C506407564C17A3 713DA88BE50911535FE716F5208B0AB1D63011C7 79F7026C690BAA50B92CD8B66A3AD3F4F22C4FED 9BA44C2621385CB966EBA586F72C284D731FABEE A27677289986DB50844682F8ACB77FC2E86E29AC A9C5DF4D22E99998D9875A5110C01C5A2F6059E7 DCFD35E0BF8CA7344752DE8B6FB21E8933C60243 F3A04C595DB5B6A5F1ECA43E3B7BBB100D811BBE F7DA48BB64BCB84ECBA7EE6935CD23C10D498E23
	TOMCAT_MAJOR=7
	TOMCAT_VERSION=7.0.109
	TOMCAT_SHA512=612e830913bf1401bc9540e2273e465b0ee7ef63750a9969a80f1e9da9edb4888aa621fcc6fa5ba23cff94a40e91eb97e3f969b8064dabd49b2d0ea29e59b57e
	HOME=/root

17. Find out which port is exposed for tomcat?
	 localhost:8080

18. Run multiple conntainers of tomcat on different port and access it's home page.
	docker run -it --rm -p 9090:8080 tomcat:7.0
	docker run -it --rm -p 9191:8080 tomcat:7.0
	docker run -it --rm -p 8181:8080 tomcat:7.0
	
19. Pull ubuntu os from dockerhub, try to pull 2 images of ubuntu, Except the latest one.
	docker pull ubuntu:20.04
	docker pull ubuntu:20.10

20. Run the container of ubuntu in attached mode.
	docker run -it ubuntu:20.04
	
21. Run the container of another ubuntu in detached mode.
	docker run -d ubuntu:20.10

22. Check how many ubuntu containers are running and stopped
	one container is running and one is stopped

23. Is the tomcat container running? If no, start one.
	No,
	docker start 2cf376d39c2a

24. Check the logs, generated by tomcat container(don't forget to make request to tomcat's home page to see the log).
	docker log 2cf376d39c2a --details

25. Check if ubuntu conatiner is running? If no, start one in attached mode to the terminal.
	No,
	docker run -it ubuntu:20.04

26. Login as root user in ubuntu container
	docker run -u 0 -it ubuntu:20.04 /bin/bash

27. Create a file with any name in root directory
	mkdir sakshi

28. Install software of your choice in ubuntu container using "apt-get install"
	apt-get update
	apt-get install nginx

29. Now exit the ubuntu shell, are you back to your host machine, if not, come back to the host machine.
	Yes

30. Check if the ubuntu container is running.
	No

31. Create a new ubuntu container out of the same image as that previous container in attached mode.
	docker run -it ubuntu:20.04

32. Login as a root user
	docker exec -u 0 -it ubuntu:20.04 /bin/bash
	
33. Check if you can see the file created in previous container, you will not see the file as well as software that you installed in the previous container. Now kill this Container.
	docker kill da67fa46bf2

34. Do you have the previous ubuntu container where you created the file and installed the software? If no reapeat step 25 to 29.
	Yes

35. Create an Image out of the existing container.
	docker commit 6428a3c9f118 new_ubuntu

36. Now Create a Container out of this image and login into it to see if you can see the file and software installed by you in the previous container.
	docker run -u 0 -it --name ubuntu_nginx new_ubuntu /bin/bash

37. Do you have running tomcat container? If yes, Stop it and kill all tomcat container.
	Yes,
	docker kill 2c29b75a0b30
 
38. Create an index.html file with following code in it:-
	<h1>This is Tomcat Container</h1>

	touch index.html
	vi index.html
	<h1>This is Tomcat Container</h1>

Now, Start a tomcat container in such a way that on hitting its URL for home page it should show the above html page.


39. type below command:-
	docker images --help
Now, try to run command that proves the concept of following three options:-
1. -a
	docker images -a shows all the images which are pulled form the dockerHub
2. -f
	docker images --format "table {{.ID}}\t{{.Repository}}" will shows the list of images in the give format i.e in table ID and Repository.
	docker images --filter "dangling=false" will shows the list of image which has tages and if the dangling is true then it will show the untagged images.
3. -q
	docker image -q will show the ID's all the images
write atleast 1 command using each option above and prove their concepts as described in the --help.


40. type below command:-
	docker ps --help
Now, try to run command that proves the concept of following six options:-
1. -a
	docker ps -a will list out all the containers 
2. -f
3. -q
	docker ps -q will list out containerID's
4. -n
5. -l
6. -s
	docker ps -s will show the file size.

write atleast 1 command using each option above and prove their concepts as described in the --help.


41. Type below command:-
	docker --help

you will various sections of commands apart from options like "Managemnet Commands" and "Commands".


Write some texts below describing the use of "Management Commands".
	builder     Manage builds
 	buildx*     Build with BuildKit (Docker Inc., v0.5.1-docker)
  	compose*    Docker Compose (Docker Inc., 2.0.0-beta.1)
  	config      Manage Docker configs
  	container   Manage containers
  	context     Manage contexts
  	image       Manage images
  	manifest    Manage Docker image manifests and manifest lists
  	network     Manage networks
  	node        Manage Swarm nodes
  	plugin      Manage plugins
  	scan*       Docker Scan (Docker Inc., v0.8.0)
  	secret      Manage Docker secrets
  	service     Manage services
  	stack       Manage Docker stacks
  	swarm       Manage Swarm
  	system      Manage Docker
  	trust       Manage trust on Docker images
  	volume      Manage volumes
	

Use each command mentioned below and prove its concepts as described in the --help desription. write what you have understood from the output of the command after its successful execution.
1. cp     >> Copy files/folders between a container and the local filesystem
2. create >> Create a new container
3. export >> Export a container's filesystem as a tar archive
4. history>> Show the history of an image
5. info   >> Display system-wide information
6. login  >> Log in to a Docker registry
7. logout >> Log out from a Docker registry
8. rename >> Rename a container
9. save   >> Save one or more images to a tar archive (streamed to STDOUT by default)
10. stats >> Display a live stream of container(s) resource usage statistics
11. top   >> Display the running processes of a container



42. Kill all running container in one liner command.	
	docker rm -f $(docker ps -a -q)

43. Delete all images in one liner command.
	docker rmi -f $(docker image -q)

44. Create a simple Dockerfile, build it and run it.
	FROM ubuntu
   	MAINTAINER rahil
  	RUN apt-get update
  	CMD ["echo", "hello world...."]
	
	docker build -t myimage:1.0
	docker images
	docker run myimage
	--> hello world....

45. Create one or more Dockerfile that demostrate the following commands in Dockerfile (Write a PoC for each in one or more Dockerfile)
	1. USER
	2. RUN
	3. ENV
	4. CMD
	5. RUN
	6. ENTRYPOINT
	7. EXPOSE
	8. VOLUME

	FROM ubuntu
   	ENV MY_NAME="SAKSHI_BOBDE"
   	RUN mkdir -p /usr/src/app
   	WORKDIR /usr/src/app
   	VOLUME . /usr/src/app
   	RUN apt-get install nginx
   	EXPOSE 8080
   	ENTRYPOINT ["echo", "hello world...."]
	
46. Dockerhub:-
	Find a application you care about on docker hub.
	Launch the container.
	Install another application in it.
	Save (commit) the image.
	Upload that to docker hub in your account and share it with a colleague, ask them to use your image and run the container out of it in their machine/vm.
	
	https://hub.docker.com/repository/docker/sakshibobde/myapp


								